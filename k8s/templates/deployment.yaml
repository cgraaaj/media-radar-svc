apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "k8s.fullname" . }}
  labels:
    {{- include "k8s.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "k8s.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.vault.enabled }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-vault-addr: {{ .Values.vault.addr | quote }}
        vault.hashicorp.com/role: {{ .Values.vault.auth.role | quote }}
        {{- if .Values.vault.agent.limits }}
        vault.hashicorp.com/agent-limits-cpu: {{ .Values.vault.agent.limits.cpu | quote }}
        vault.hashicorp.com/agent-limits-mem: {{ .Values.vault.agent.limits.memory | quote }}
        {{- end }}
        {{- if .Values.vault.agent.requests }}
        vault.hashicorp.com/agent-requests-cpu: {{ .Values.vault.agent.requests.cpu | quote }}
        vault.hashicorp.com/agent-requests-mem: {{ .Values.vault.agent.requests.memory | quote }}
        {{- end }}
        {{- if .Values.vault.inject.env }}
        {{- range $name, $path := .Values.vault.inject.env }}
        {{- if or (hasPrefix "secret/" $path) (hasPrefix "database/" $path) (hasPrefix "kv-v2/" $path) }}
        vault.hashicorp.com/agent-inject-env-{{ $name }}: {{ $path | quote }}
        {{- else }}
        vault.hashicorp.com/agent-inject-env-{{ $name }}: {{ printf "secret/%s/%s" $.Values.vault.path $path | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.vault.inject.secrets }}
        {{- range $name, $path := .Values.vault.inject.secrets }}
        {{- if or (hasPrefix "secret/" $path) (hasPrefix "database/" $path) (hasPrefix "kv-v2/" $path) }}
        vault.hashicorp.com/agent-inject-secret-{{ $name }}: {{ $path | quote }}
        {{- else }}
        vault.hashicorp.com/agent-inject-secret-{{ $name }}: {{ printf "secret/%s/%s" $.Values.vault.path $path | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.vault.inject.templates }}
        {{- range $name, $template := .Values.vault.inject.templates }}
        vault.hashicorp.com/agent-inject-template-{{ $name }}: |
          {{- $template | nindent 10 }}
        {{- end }}
        {{- end }}
        {{- end }}
      labels:
        {{- include "k8s.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "k8s.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if and .Values.runtime.sourceInjectedFiles.enabled .Values.runtime.sourceInjectedFiles.files }}
          command: ["sh", "-c"]
          args:
            - |
              set -e
              echo "=== Sourcing Vault secrets ==="
              set -a
              {{- range $f := .Values.runtime.sourceInjectedFiles.files }}
              [ -f "/vault/secrets/{{ $f }}" ] && source "/vault/secrets/{{ $f }}" || true
              {{- end }}
              set +a
              echo "=== Starting app ==="
              exec npm start
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.env }}
          env:
            - name: NODE_ENV
              value: {{ .nodeEnv | quote }}
            - name: HOST
              value: {{ .host | quote }}
            - name: FRONTEND_URL
              value: {{ .frontendUrl | quote }}
            - name: ALLOWED_ORIGINS
              value: {{ .allowedOrigins | quote }}
            - name: REDIS_HOST
              value: {{ .redis.host | quote }}
            - name: REDIS_PORT
              value: {{ .redis.port | quote }}
            - name: DB_HOST
              value: {{ .pg.host | quote}}
            - name: DB_PORT
              value: {{ .pg.port | quote}}
            - name: DB_NAME
              value: {{ .pg.db | quote}}
            - name: TMDB_BASE_URL
              value: {{ .tmdb.baseUrl | quote }}
            - name: TMDB_IMAGE_BASE_URL
              value: {{ .tmdb.imageBaseUrl | quote }}
            - name: OMDB_BASE_URL
              value: {{ .omdb.baseUrl | quote }}
            - name: DEFAULT_MOVIES_POSTER
              value: {{ .defaults.moviesPoster | quote }}
            - name: DEFAULT_TVSHOWS_POSTER
              value: {{ .defaults.tvshowsPoster | quote }}
            - name: RUNTIME_ENV
              value: {{ .runtimeEnv | quote }}
          {{- end }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
