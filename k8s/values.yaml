# Default values for media-radar-svc-k8s.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: registry.cgraaaj.in/media-radar/media-radar-svc
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "51a0abd"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "mediaradar-svc-sa"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations:
  vault.hashicorp.com/service-account-token-expiration: "3600"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 5000

# Ingress configuration
ingress:
  enabled: false

## Enable Traefik IngressRoute
ingressRoute:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: traefik-external
  entryPoints:
    - websecure # HTTPS entry point
  routes:
    - match: Host(`mediaradar.cgraaaj.in`) && PathPrefix(`/api`)
      kind: Rule
      services:
        - name: mediaradar-svc-k8s
          port: 5000
  tls:
    secretName: "mediaradar-cgraaaj-in-tls"

# Vault Agent Injector Configuration
# Enable Vault Agent Injector for secret management
vault:
  enabled: true
  path: "kv-v2"
  addr: "http://hashicorpvault-agent-injector.hashicorp.svc.cluster.local:8200"
  auth:
    role: "mediaradar-svc-role"
  agent:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "10m"
      memory: "64Mi"
  # Where injector mounts rendered secrets
  secretVolumePath: "/vault/secrets"
  # Vault volume name and toggles (set to false if you define your own)
  volumeName: "vault-secrets"
  addVolume: false
  addVolumeMount: false
  # Configure what to inject via annotations
  inject:
    # name => Vault secret relative path (to vault.path) or absolute path
    # Env vars expected by the app:
    env:
      app-config: "kv-v2/data/mediaradar/api-keys"
    # name => Vault secret path (for file injection)
    secrets:
      creds.env: "database/creds/redis-readonly"
    # name => template body (for custom rendered files)
    templates:
      creds.env: |
        {{- with secret "database/creds/redis-readonly" -}}
        REDIS_USERNAME="{{ .Data.username }}"
        REDIS_PASSWORD="{{ .Data.password }}"
        {{- end }}
      app-config: |
        {{- with secret "kv-v2/data/mediaradar/api-keys" -}}
        export TMDB_API_KEY="{{ .Data.data.TMDB_API_KEY }}"
        export TMDB_ACCESS_TOKEN="{{ .Data.data.TMDB_ACCESS_TOKEN }}"
        export OMDB_API_KEY="{{ .Data.data.OMDB_API_KEY }}"
        {{- end }}
  # Optional: direct env variables (values may include Vault template strings if desired)
  env: {}

# Runtime config: source Vault-injected files before starting app
runtime:
  sourceInjectedFiles:
    enabled: true
    files:
      - "creds.env"
      - "app-config"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Environment Variables Configuration
# Note: Sensitive values (passwords, API keys, secrets) are injected by Vault
# and should not be specified here. Only non-sensitive configuration should be included.
env:
  # Server Configuration
  nodeEnv: "production"
  host: "0.0.0.0"
  frontendUrl: "https://mediaradar.cgraaaj.in"
  allowedOrigins: "https://mediaradar.cgraaaj.in,http://localhost:3000"

  # Runtime Environment
  runtimeEnv: "k8s"
  
  # Redis Configuration (non-sensitive values only)
  redis:
    host: "192.168.1.72"  # Update with your actual Redis service name
    port: "6379"
    # password is fetched from Vault, not needed here
  
  # TMDB API Configuration (non-sensitive values only)
  tmdb:
    baseUrl: "https://api.themoviedb.org/3"
    imageBaseUrl: "https://image.tmdb.org/t/p/w500"
    # apiKey and accessToken are fetched from Vault, not needed here
  
  # OMDB API Configuration (non-sensitive values only)
  omdb:
    baseUrl: "http://www.omdbapi.com/"
    # apiKey is fetched from Vault, not needed here
  
  # Default Settings
  defaults:
    moviesPoster: "https://via.placeholder.com/300x450/2a2a2a/ffffff?text=ðŸŽ¬"
    tvshowsPoster: "https://via.placeholder.com/300x450/2a2a2a/ffffff?text=ðŸ“º"
  
  # Cache Settings
  cache:
    ttl: "3600"
    maxSize: "1000"
  
  # Rate Limiting
  rateLimit:
    limit: "100"
    window: "900000"
  
  # Security Settings (fetched from Vault, not needed here)
  # jwtSecret and sessionSecret are fetched from Vault
  
  # Logging Configuration
  logging:
    level: "info"
    format: "combined"
